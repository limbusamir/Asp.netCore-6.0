@model SADBLTrainingReport.ViewModels.TrainConductedViewModel
@{
    ViewData["Title"] = "Create";
}

<form method="post">
    <div class="container mt-4">
        <div class="card">

            <div class="row">
                <div class="col-12 text-center">
                    <h6 class="py-2 fw-bold">Training Conduct</h6>
                </div>
                <div asp-validation-summary="All" class="text-danger">
                </div>
                <div class="col-12">
                    <table class="table  table-striped" border="1" width="100%">
                        <tr>
                            <td>
                                <label class="">Date</label>
                            </td>
                            <td>
                                <input class="form-control" />
                                <span class="text-danger"></span>
                            </td>
                            <td>
                                <label class="">Program</label>
                            </td>
                            <td>
                                <input class="form-control" />
                                <span class="text-danger"></span>
                            </td>
                            <td>
                                <label class="">Institute</label>
                            </td>
                            <td>
                                <input class="form-control" />
                                <span class="text-danger"></span>
                            </td>
                            <td>
                                <label class="">Type</label>
                            </td>
                            <td>
                                <select class="form-select">
                                    <option value="0">select</option>
                                    <option value="1">Internal</option>
                                    <option value="2">External</option>
                                </select>
                                <span class="text-danger"></span>
                            </td>


                        </tr>


                    </table>


                </div>
                <div class="mt-4"></div>
                <div class="col-6">
                    <table id="dynamicTable" class="table  table-striped" border="1">
                        <thead>
                            <tr><th colspan="3" class="text-center">Trainer</th></tr>
                            <tr>
                                <th>S.No</th>
                                <th>Trainer Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Model.TrainerRows)
                            {
                                <tr>
                                    <td><input type="text" class="form-control" name="SNNo[]" value="@row.SNNo" readonly /></td>
                                    <td><input type="text" class="form-control" name="trainerName[]" value="@row.trainerName" /></td>
                                    <td><button type="button" onclick="deleteRow(this)" class="btn btn-danger btn-grid-custom">Delete</button></td>
                                    <!-- Add more columns if needed -->
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="button" class="btn-primary btn-grid-custom" onclick="addRow()">Add Row</button>

                    @*  <button type="submit">Submit</button> *@
                </div>
                <div class="col-6">
                    <table id="dynamicTable_staff" class="table  table-striped" border="1">
                        <thead>
                            <tr><th colspan="3" class="text-center">Staff</th></tr>
                            <tr>
                                <th>S.No</th>
                                <th>Staff Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Model.StaffRows)
                            {
                                <tr>
                                    <td><input type="text" class="form-control" name="SNNo[]" value="@row.SNNo" readonly /></td>
                                    
                                    <td><input type="text" class="form-control" name="staffName[]" value="@row.staffName" /></td>
                                    <td><button type="button" onclick="deleteRowStaff(this)" class="btn btn-danger btn-grid-custom">Delete</button></td>
                                    <!-- Add more columns if needed -->
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="button" class="btn-primary btn-grid-custom" onclick="addRowStaff()">Add Row</button>
                </div>
                <div class="text-end mt-4 mb-4">
                    <button class="btn btn-primary btn-grid-custom">Save</button>
                    <a asp-controller="Training" asp-action="Index" class="btn btn-secondary btn-grid-custom">Back to List</a>

                </div>
            </div>
        </div>

    </div>
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div id="toast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    At least one row must remain!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</form>
@section Scripts{
    @{
        <partial name="_ValidationScriptsPartial" />
    }
    <script>
        var rowIndex = @Model.TrainerRows.Count + 1; // Initialize the row index counter
        function addRow() {
            var table = document.getElementById("dynamicTable").getElementsByTagName('tbody')[0];
            var newRow = table.insertRow(table.rows.length);

            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);


            // Add more cells if needed

            // You can customize the content of each cell here
            cell1.innerHTML = "<input type='text' class='form-control' name='SNNo[]' value='" + rowIndex + "' readonly />";
            cell2.innerHTML = "<input type='text' ' class='form-control' name='trainerName[]' />";
            cell3.innerHTML = "<button type='button' class='btn btn-danger btn-grid-custom'onclick='deleteRow(this)'>Delete</button>";

            rowIndex++;
            updateIndexes();// Increment the row index counter

            // Add more cells content if needed
        }
        function deleteRow(button) {
            var table = document.getElementById("dynamicTable").getElementsByTagName('tbody')[0];
            var row = button.parentNode.parentNode;

            // Check if there's only one row left, prevent deletion if true
            if (table.rows.length === 1) {
                // alert("At least one row must remain!");
                toast = new bootstrap.Toast(document.getElementById('toast'));
                toast.show();
            } else {
                row.parentNode.removeChild(row);
                updateIndexes(); // Update indexes after deletion
            }
        }
        function updateIndexes() {
            var table = document.getElementById("dynamicTable").getElementsByTagName('tbody')[0];
            var rows = table.getElementsByTagName('tr');
            for (var i = 0; i < rows.length; i++) {
                rows[i].getElementsByTagName('input')[0].value = i + 1;

            }
        }
    </script>
    <script>
        var rowIndex = @Model.StaffRows.Count + 1; // Initialize the row index counter
        function addRowStaff() {
            var table = document.getElementById("dynamicTable_staff").getElementsByTagName('tbody')[0];
            var newRow = table.insertRow(table.rows.length);

            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);


            // Add more cells if needed

            // You can customize the content of each cell here
            cell1.innerHTML = "<input type='text' class='form-control' name='SNNo[]' value='" + rowIndex + "' readonly />";
            cell2.innerHTML = "<input type='text' ' class='form-control' name='staffName[]' />";
            cell3.innerHTML = "<button type='button' class='btn btn-danger btn-grid-custom'onclick='deleteRowStaff(this)'>Delete</button>";

            rowIndex++;
            updateIndexesStaff();// Increment the row index counter

            // Add more cells content if needed
        }
        function deleteRowStaff(button) {
            var table = document.getElementById("dynamicTable_staff").getElementsByTagName('tbody')[0];
            var row = button.parentNode.parentNode;

            // Check if there's only one row left, prevent deletion if true
            if (table.rows.length === 1) {
                // alert("At least one row must remain!");
                toast = new bootstrap.Toast(document.getElementById('toast'));
                toast.show();
            } else {
                row.parentNode.removeChild(row);
                updateIndexesStaff(); // Update indexes after deletion
            }
        }
        function updateIndexesStaff() {
            var table = document.getElementById("dynamicTable_staff").getElementsByTagName('tbody')[0];
            var rows = table.getElementsByTagName('tr');
            for (var i = 0; i < rows.length; i++) {
                rows[i].getElementsByTagName('input')[0].value = i + 1;

            }
        }
    </script>
    }


